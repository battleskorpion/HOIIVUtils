package com.hoi4utils.script

import com.typesafe.scalalogging.LazyLogging

import java.io.{File, FileNotFoundException, PrintWriter}
import java.io.{FileNotFoundException, PrintWriter}
import java.time.LocalDateTime
import javax.swing.JOptionPane
import scala.util.Using

object PDXScriptFileOps extends LazyLogging {
  
  /**
   * Saves the given PDXScript to a file in the specified directory.
   * If the script is null, it does nothing.
   * If the directory does not exist, it attempts to create it.
   * The file is named based on the script type or a default name if not applicable.
   *
   * @param script the PDXScript to save
   * @param dir    the directory where the script should be saved
   */
  def savePDX(script: PDXScript[?], dir: File): Unit = {
    if (script == null) return
    if (!dir.exists() && !dir.mkdir()) {
      logger.error("Error creating directory for saving PDXScript: \n{}", script)
      return
    }
    val path = script match {
      case pdxf: PDXFile => new File(dir, "\\" + pdxf.fileName)
      case _ => new File(dir, script.getClass.getSimpleName + ".txt")
    }
    val writer = new PrintWriter(path)
    try {
      writer.println("### Generated by HOI4Utils, time: " + LocalDateTime.now + "###")
      writer.println(script.toScript)
      writer.close()
      logger.info("Exported PDXScript {} to {}", script.getClass.getSimpleName, path)
    } catch {
      case e: FileNotFoundException => logger.error("Error saving PDXScript: \n{}", e.getMessage)
    }
  }

  /**
   * Exports the given PDXScript to a file at the specified path.
   * If the script is null, it does nothing.
   * If the file cannot be created, it shows an error message.
   *
   * @param script the PDXScript to export
   * @param path   the path where the script should be exported
   */
  def exportTo(script: PDXScript[?], path: String): Unit = {
    Using(new PrintWriter(path)) { writer =>
      writer.println(s"### Generated by HOI4Utils, time: ${LocalDateTime.now} ###")
      writer.println(script.toScript)
    } recover {
      case e: FileNotFoundException =>
        JOptionPane.showMessageDialog(null, "Error exporting PDXScript: " + e.getMessage, "Error", JOptionPane.ERROR_MESSAGE)
    }
  }
}